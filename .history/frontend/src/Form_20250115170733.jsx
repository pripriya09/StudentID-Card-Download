import React, { useState, useRef } from "react";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import axios from "axios";
import "./App.css";

const Form = () => {
  const [count, setCount] = useState(1); // Number of passengers
  const [consent, setConsent] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false); // Track if the form is successfully submitted
  const [formData, setFormData] = useState(
    Array.from({ length: 1 }, () => ({
      name: "",
      fatherName: "",
      phoneNumber: "",
      address: "",
      image: null,
      disease: "",
      reference: "",
    }))
  );
  const [idCardData, setIdCardData] = useState(null);
  const fileInputRefs = useRef([]);

  const handleCountChange = (e) => {
    const newCount = parseInt(e.target.value, 10) || 1;
    setCount(newCount);

    // Adjust form data array length
    setFormData((prevData) => {
      const updatedFormData = [...prevData];
      while (updatedFormData.length < newCount) {
        updatedFormData.push({
          name: "",
          fatherName: "",
          phoneNumber: "",
          address: "",
          image: null,
          disease: "",
          reference: "",
        });
      }
      return updatedFormData.slice(0, newCount);
    });
  };

  const handleChange = (index, e) => {
    const { name, value, type, files } = e.target;
    setFormData((prevData) => {
      const updatedData = [...prevData];
      if (type === "file") {
        const reader = new FileReader();
        reader.onloadend = () => {
          updatedData[index][name] = reader.result;
          setFormData(updatedData);
        };
        if (files[0]) reader.readAsDataURL(files[0]);
      } else {
        updatedData[index][name] = value;
      }
      return updatedData;
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!consent) {
      alert("Please provide consent for registration.");
      return;
    }
    try {
      const formDataToSubmit = formData.map((data) => {
        const {
          name,
          fatherName,
          phoneNumber,
          address,
          image,
          consent,
          disease,
          reference,
        } = data;
        return {
          name,
          fatherName,
          phoneNumber,
          address,
          image, // Base64 image
          consent,
          disease,
          reference,
        };
      });

      const response = await axios.post("http://localhost:6009/api/students", {
        passengers: formDataToSubmit,
        consent: consent,
      });

      if (response.status === 200) {
        alert("Passengers registered successfully.");
        console.log("Response Data:", response.data);

        setFormData((prevData) =>
          prevData.map((data, index) => ({
            ...data,
            registrationNumber: response.data.registrationNumbers[index],
          }))
        );

        // Mark the form as successfully submitted
        setIsSubmitted(true);
      } else {
        alert("Failed to register passengers. Please try again.");
      }

      setIdCardData(formData);
    } catch (error) {
      console.error("Error submitting form:", error);
      alert("An error occurred while submitting the form.");
    }
  };

  const handleDownloadPDF = () => {
    // Check if all passengers have a valid registration number
    if (formData.some((data) => !data.registrationNumber)) {
      alert("Please register all passengers before downloading the ID cards.");
      return;
    }

    const pdf = new jsPDF();
    const idCardElements = document.querySelectorAll(".id-card-table");

    Promise.all(
      Array.from(idCardElements).map((card) =>
        html2canvas(card, { scale: 1 }).then((canvas) =>
          canvas.toDataURL("image/png")
        )
      )
    ).then((images) => {
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();

      // Define ID card dimensions and spacing
      const cardWidth = 100; // Set desired width for the ID card
      const cardHeight = 60; // Set desired height for the ID card
      const margin = 10; // Margin between cards
      const cardsPerRow = Math.floor(
        (pdfWidth - margin) / (cardWidth + margin)
      );

      let x = margin;
      let y = margin;

      images.forEach((imgData, index) => {
        // Add image to the PDF
        pdf.addImage(imgData, "PNG", x, y, cardWidth, cardHeight);

        // Update x and y for the next card
        x += cardWidth + margin;

        // Move to the next row if the current row is full
        if ((index + 1) % cardsPerRow === 0) {
          x = margin;
          y += cardHeight + margin;

          // Add a new page if the current page is full
          if (y + cardHeight + margin > pdfHeight) {
            pdf.addPage();
            y = margin;
          }
        }
      });

      // Save the PDF
      pdf.save("Passenger_ID_Cards.pdf");
    });

    setFormData((prevData) =>
      prevData.map((data) => ({
        ...data,
        name: "",
        fatherName: "",
        phoneNumber: "",
        address: "",
        disease: "",
        reference: "",
        image: null, // Reset image
        registrationNumber: "",
      }))
    );
    setConsent("")
    // Reset file inputs (clear image fields)
    if (fileInputRefs.current) {
      fileInputRefs.current.forEach((ref) => (ref.value = "")); // Clear file inputs
    }
  };

  return (

    <div className="maincontainer">
      <div className="header">
        
      </div>
      <div className="App content">
        <div className="header-pic">
          <img src="/khatu-shyam-banner.jpg" alt="" />
        </div>
        <label>
          Number of Passengers:
          <input
            type="number"
            min="1"
            max="10"
            value={count}
            onChange={handleCountChange}
          />
        </label>
        <form onSubmit={handleSubmit}>
          {formData.map((data, index) => (
            <div key={index} className="passenger-form">
              <h2>Passenger {index + 1}</h2>
              <div className="form-field">
                <label htmlFor={`name-${index}`}>Name</label>
                <input
                  type="text"
                  name="name"
                  id={`name-${index}`}
                  placeholder="Name"
                  value={data.name}
                  onChange={(e) => handleChange(index, e)}
                  maxLength={20}
                  required
                />
              </div>

              <div className="form-field">
                <label htmlFor={`fatherName-${index}`}>Father's Name</label>
                <input
                  type="text"
                  name="fatherName"
                  id={`fatherName-${index}`}
                  placeholder="Father's Name"
                  value={data.fatherName}
                  onChange={(e) => handleChange(index, e)}
                  maxLength={20}
                  required
                />
              </div>

              <div className="form-field">
                <label htmlFor={`phoneNumber-${index}`}>Phone Number</label>
                <input
                  type="tel"
                  name="phoneNumber"
                  id={`phoneNumber-${index}`}
                  placeholder="Phone Number"
                  value={data.phoneNumber}
                  onChange={(e) => handleChange(index, e)}
                  pattern="\d{10}"
                  title="Phone number must be 10 digits / only number allowed"
                  required
                />
              </div>

              <div className="form-field">
                <label htmlFor={`image-${index}`}>Image</label>
                <input
                  type="file"
                  name="image"
                  id={`image-${index}`}
                  onChange={(e) => handleChange(index, e)}
                  ref={(el) => (fileInputRefs.current[index] = el)}
                  required
                />
              </div>

              <div className="form-field">
                <label htmlFor={`address-${index}`}>Address</label>
                <input
                  type="text"
                  name="address"
                  id={`address-${index}`}
                  placeholder="Address"
                  value={data.address}
                  onChange={(e) => handleChange(index, e)}
                  maxLength={20}
                  required
                />
              </div>

              <div className="form-field">
                <label htmlFor={`disease-${index}`}>Disease (if any)</label>
                <input
                  type="text"
                  name="disease"
                  id={`disease-${index}`}
                  value={data.disease}
                  onChange={(e) => handleChange(index, e)}
                  required
                />
              </div>

              <div className="form-field">
                <label htmlFor={`reference-${index}`}>Reference (Name & Mobile)</label>
                <input
                  type="text"
                  name="reference"
                  id={`reference-${index}`}
                  value={data.reference}
                  onChange={(e) => handleChange(index, e)}
                  required
                />
              </div>
            </div>
          ))}

          <label className="centered-consent">
            <div className="agreement-text">
              <span>
                I provide consent for all passengers and agree to the following terms:
              </span>
              <p><strong>üåü ‡§∂‡•ç‡§∞‡•Ä ‡§ñ‡§æ‡§ü‡•Ç ‡§∂‡•ç‡§Ø‡§æ‡§Æ ‡§¨‡§æ‡§¨‡§æ ‡§ï‡•Ä ‡§µ‡§ø‡§∞‡§æ‡§ü ‡§™‡•à‡§¶‡§≤ ‡§®‡§ø‡§∂‡§æ‡§® ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•á ‡§®‡§ø‡§Ø‡§Æ ‡§î‡§∞ ‡§¶‡§ø‡§∂‡§æ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂ üåü</strong></p>
              <ol>
                <li>‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•Ä ‡§∏‡§Ç‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ú‡§ø‡§Æ‡•ç‡§Æ‡•á‡§¶‡§æ‡§∞‡•Ä ‡§∏‡•ç‡§µ‡§Ø‡§Ç ‡§Ø‡§æ‡§§‡•ç‡§∞‡•Ä ‡§ï‡•Ä ‡§π‡•ã‡§ó‡•Ä‡•§</li>
                <li>60 ‡§µ‡§∞‡•ç‡§∑ ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§Ü‡§Ø‡•Å ‡§ï‡•á ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•á ‡§∏‡§æ‡§• ‡§â‡§®‡§ï‡•á ‡§™‡§∞‡§ø‡§ö‡§æ‡§∞‡§ï ‡§ï‡§æ ‡§π‡•ã‡§®‡§æ ‡§Ö‡§®‡§ø‡§µ‡§æ‡§∞‡•ç‡§Ø ‡§π‡•à‡•§</li>
                <li>‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§ú‡§ø‡§Æ‡•ç‡§Æ‡•á‡§¶‡§æ‡§∞‡•Ä ‡§â‡§®‡§ï‡•á ‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï‡•ã‡§Ç ‡§ï‡•Ä ‡§π‡•ã‡§ó‡•Ä‡•§</li>
                <li>‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Ä‡§ü ‡§≤‡•á‡§®‡•á ‡§™‡§∞ ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∂‡•Å‡§≤‡•ç‡§ï ‡§ï‡§æ ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§∞‡§®‡§æ ‡§™‡§°‡§º‡•á‡§ó‡§æ‡•§</li>
                <li>‡§∏‡§Æ‡§ø‡§§‡§ø ‡§ï‡•á ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡•ã‡§Ç ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§Ö‡§®‡§ø‡§µ‡§æ‡§∞‡•ç‡§Ø ‡§π‡•à‡•§ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§∏‡§Æ‡§ø‡§§‡§ø ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§∏‡§Æ‡§Ø-‡§∏‡§Æ‡§Ø ‡§™‡§∞ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂ ‡§ú‡§æ‡§∞‡•Ä ‡§ï‡§ø‡§è ‡§ú‡§æ‡§è‡§Ç‡§ó‡•á, ‡§ú‡§ø‡§®‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡§®‡§æ ‡§∏‡§≠‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•ã‡§ó‡§æ‡•§</li>
                <li>‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§µ‡•ç‡§π‡§æ‡§ü‡•ç‡§∏‡§è‡§™ ‡§®‡§Ç‡§¨‡§∞ ‡§Ö‡§µ‡§∂‡•ç‡§Ø ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§</li>
                <li>‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§Ö‡§≤‡•ç‡§™‡§æ‡§π‡§æ‡§∞ ‡§ï‡•Ä ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ ‡§∞‡§π‡•á‡§ó‡•Ä, ‡§î‡§∞ ‡§®‡§ø‡§∂‡§æ‡§® ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•á ‡§™‡§∂‡•ç‡§ö‡§æ‡§§ ‡§≠‡•ã‡§ú‡§® ‡§™‡•ç‡§∞‡§∏‡§æ‡§¶‡•Ä ‡§ï‡•Ä ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ ‡§ï‡•Ä ‡§ú‡§æ‡§è‡§ó‡•Ä‡•§</li>
                <li>‡§Ö‡§™‡§®‡•Ä ‡§∏‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Ç ‡§Ö‡§™‡§®‡•á ‡§∏‡§æ‡§• ‡§≤‡•á‡§ï‡§∞ ‡§Ü‡§è‡§Ç‡•§</li>
                <li>‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§®‡§ø‡§ú‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∞‡•ç‡§• ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§ ‡§Ø‡§¶‡§ø ‡§ï‡§ø‡§∏‡•Ä ‡§Ö‡§®‡•ç‡§Ø ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ ‡§ï‡•á ‡§®‡§æ‡§Æ ‡§™‡§∞ ‡§Ü‡§™‡§∏‡•á ‡§ï‡§ø‡§∏‡•Ä ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡§æ ‡§ß‡§® ‡§Æ‡§æ‡§Ç‡§ó‡§æ ‡§ú‡§æ‡§è, ‡§§‡•ã ‡§â‡§∏‡§ï‡•Ä ‡§∏‡•Ç‡§ö‡§®‡§æ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§¶‡•á‡§Ç‡•§</li>
                <li>‡§®‡§ø‡§∂‡§æ‡§® ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§∞‡•Ä‡§Ç‡§ó‡§∏ ‡§Æ‡•ã‡§°‡§º ‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠ ‡§π‡•ã‡§ï‡§∞ ‡§¨‡§æ‡§¨‡§æ ‡§ï‡•á ‡§≠‡§µ‡§® ‡§§‡§ï ‡§™‡§π‡•Å‡§Ç‡§ö‡•á‡§ó‡•Ä‡•§</li>
                <li>‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡•Ä ‡§ï‡•ã ‡§™‡§∞‡•á‡§∂‡§æ‡§®‡•Ä ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§∏‡§Æ‡§ø‡§§‡§ø ‡§ï‡•á ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•ã ‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ 100 ‡§®‡§Ç‡§¨‡§∞ ‡§™‡§∞ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§</li>
                <li>‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§Æ‡§æ‡§¶‡§ï ‡§™‡§¶‡§æ‡§∞‡•ç‡§•‡•ã‡§Ç ‡§ï‡§æ ‡§∏‡•á‡§µ‡§® ‡§™‡•Ç‡§∞‡•ç‡§£‡§§‡§É ‡§µ‡§∞‡•ç‡§ú‡§ø‡§§ ‡§π‡•à‡•§</li>
                <li>‡§µ‡§æ‡§™‡§∏‡•Ä ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§∏‡§≠‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡•Ä ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∏‡•ç‡§•‡§æ‡§® ‡§î‡§∞ ‡§∏‡§Æ‡§Ø ‡§™‡§∞ ‡§π‡•Ä ‡§∞‡§µ‡§æ‡§®‡§æ ‡§π‡•ã‡§Ç‡§ó‡•á‡•§</li>
                <li>‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§ï‡•Ä‡§Æ‡§§‡•Ä ‡§∏‡§æ‡§Æ‡§æ‡§® ‡§Ø‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§®‡§ï‡§¶‡•Ä ‡§® ‡§≤‡•á ‡§ú‡§æ‡§è‡§Ç‡•§ ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§¶‡•Å‡§∞‡•ç‡§ò‡§ü‡§®‡§æ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§Ü‡§Ø‡•ã‡§ú‡§ï ‡§ú‡§ø‡§Æ‡•ç‡§Æ‡•á‡§¶‡§æ‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§Ç‡§ó‡•á‡•§</li>
                <li>‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§Ø‡•ã‡§ó ‡§∞‡§æ‡§∂‡§ø ‡§µ‡§æ‡§™‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§è‡§ó‡•Ä‡•§</li>
                <li>‡§¨‡§∏ ‡§Æ‡•á‡§Ç ‡§∏‡•Ä‡§ü ‡§™‡§π‡§≤‡•á ‡§Ü‡§ì, ‡§™‡§π‡§≤‡•á ‡§™‡§æ‡§ì ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§π‡•Ä ‡§¶‡•Ä ‡§ú‡§æ‡§è‡§ó‡•Ä‡•§</li>
                <li>‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§∏‡•ç‡§•‡§æ‡§® ‡§∏‡•Å‡§¨‡§π 7:15 ‡§¨‡§ú‡•á , ‡§∏‡•ç‡§•‡§æ‡§®: ‡§∏‡§Æ‡•Å‡§∞‡§æ‡§à ‡§ó‡§æ‡§∞‡•ç‡§°‡§®, ‡§∂‡•ç‡§Ø‡§æ‡§Æ ‡§®‡§ó‡§∞ ‡§™‡•Å‡§≤‡§ø‡§∏ ‡§•‡§æ‡§®‡•á ‡§ï‡•á ‡§™‡§æ‡§∏, ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§®‡§ó‡§∞, ‡§ú‡§Ø‡§™‡•Å‡§∞‡•§</li>
                <li>‡§∏‡§≠‡•Ä ‡§µ‡§ø‡§µ‡§æ‡§¶‡•ã‡§Ç ‡§ï‡§æ ‡§®‡§ø‡§µ‡§æ‡§∞‡§£ ‡§ú‡§Ø‡§™‡•Å‡§∞ ‡§®‡•ç‡§Ø‡§æ‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§π‡•Ä ‡§π‡•ã‡§ó‡§æ‡•§</li>
              </ol>
              <p>üôè ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•ã ‡§∏‡§´‡§≤ ‡§î‡§∞ ‡§Æ‡§Ç‡§ó‡§≤‡§Æ‡§Ø ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§≠‡•Ä ‡§ï‡§æ ‡§∏‡§π‡§Ø‡•ã‡§ó ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡•à‡•§</p>

              <div className="terms">
                <input
                  type="checkbox"
                  name="consent"
                  checked={consent}
                  onChange={() => setConsent(!consent)}
                  required
                />
                <p>‡§Æ‡•à‡§Ç‡§®‡•á ‡§∏‡§≠‡•Ä ‡§®‡§ø‡§Ø‡§Æ‡•ã‡§Ç ‡§î‡§∞ ‡§¶‡§ø‡§∂‡§æ-‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡•ã‡§Ç ‡§ï‡•ã ‡§ß‡•ç‡§Ø‡§æ‡§®‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡§¢‡§º ‡§≤‡§ø‡§Ø‡§æ ‡§π‡•à ‡§î‡§∞ ‡§Æ‡•à‡§Ç ‡§á‡§®‡§ï‡§æ ‡§™‡•Ç‡§∞‡•Ä ‡§®‡§ø‡§∑‡•ç‡§†‡§æ ‡§î‡§∞ ‡§Ö‡§®‡•Å‡§∂‡§æ‡§∏‡§® ‡§ï‡•á ‡§∏‡§æ‡§• ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ/‡§ï‡§∞‡•Ç‡§Ç‡§ó‡•Ä‡•§</p>
              </div>
            </div>
          </label>

          <button type="submit">Register Passengers</button>
        </form>

        <div className="download-pdf">
          <button className="id-print-btn" onClick={handleDownloadPDF}>
            Download Card in PDF
          </button>
        </div>
        {isSubmitted && formData.map((data, index) => (
          <table
            className="id-card-table"
            key={index}
            style={{
              width: "100%",
              borderCollapse: "collapse",
              margin: "20px auto",
            }}
          >
            <tbody>
              <tr>
                <td
                  style={{ color: "red", fontWeight: 700, textAlign: "center", fontSize: "10px", whiteSpace: "nowrap" }}
                >
                  ‡•• ‡§∂‡•ç‡§∞‡•Ä ‡§ñ‡§æ‡§ü‡•Ç ‡§∂‡•ç‡§Ø‡§æ‡§Æ ‡§¶‡•á‡§µ‡§æ‡§Ø ‡§®‡§Æ‡§É ‡••
                </td>
                <td
                  colSpan="2"
                  style={{
                    color: "rgb(0, 0, 206)",
                    fontWeight: 700,
                    fontSize: "10px",
                    textAlign: "right",
                  }}
                >
                  ‡§∞‡§ú‡§ø. ‡§®‡§Ç. : COOPI2024 / JAIPURI206591
                </td>
              </tr>
              <tr>
                <td
                  colSpan="3"
                  style={{
                    textAlign: "center",
                    color: "rgb(255, 0, 0)",
                    fontWeight: 900,
                    fontSize: "26px",
                  }}
                >
                  ‡§∂‡•ç‡§∞‡•Ä ‡§ñ‡§æ‡§ü‡•Ç ‡§∂‡•ç‡§Ø‡§æ‡§Æ ‡§∏‡•á‡§µ‡§æ‡§¶‡§æ‡§∞ ‡§∏‡§Æ‡§ø‡§§‡§ø
                </td>
              </tr>
              <tr>
                <td
                  colSpan="3"
                  style={{
                    textAlign: "center",
                    color: "rgb(0, 0, 0)",
                    fontSize: "12px",
                    fontWeight: 600,
                  }}
                >
                  ‡§è ‡§¨‡•Ä 468, ‡§¶‡•Ç‡§∏‡§∞‡•Ä ‡§Æ‡§Ç‡§ú‡§ø‡§≤, ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§®‡§ó‡§∞, ‡§ï‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§∞‡•ã‡§°‡§º, ‡§Ö‡§ú‡§Æ‡•á‡§∞ ‡§∞‡•ã‡§°‡§º, ‡§ú‡§Ø‡§™‡•Å‡§∞ ‡§Æ‡•ã- 8905902495
                </td>
              </tr>
              <tr>
                <td
                  colSpan="3"
                  style={{
                    textAlign: "center",
                    color: "rgb(255, 0, 43)",
                    fontWeight: 700,
                    fontSize: "15px",
                  }}
                >
                  ‡§∞‡•Ä‡§Ç‡§ó‡§∏ ‡§∏‡•á ‡§ñ‡§æ‡§ü‡•Ç‡§ß‡§æ‡§Æ ‡§™‡§¶‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ (‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï- 13 ‡§´‡§∞‡§µ‡§∞‡•Ä 2025)
                </td>
              </tr>
              <tr>
                <td
                  colSpan="3"
                  style={{
                    color: "rgb(0, 0, 0)",
                    fontWeight: 600,
                    borderBottom: "1px dotted rgb(58, 58, 58)",
                  }}
                >
                  ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§∂‡§® ‡§®‡§Ç. - {data.registrationNumber}
                </td>
              </tr>
              <tr>
                <td
                  colSpan="3"
                  style={{
                    color: "rgb(0, 0, 0)",
                    fontWeight: 600,
                    borderBottom: "1px dotted rgb(58, 58, 58)",
                  }}
                >
                  ‡§™‡§¶‡§Ø‡§æ‡§§‡•ç‡§∞‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ - {data.name}
                </td>
              </tr>
              <tr>
                <td
                  colSpan="3"
                  style={{
                    color: "rgb(0, 0, 0)",
                    fontWeight: 600,
                    borderBottom: "1px dotted rgb(58, 58, 58)",
                  }}
                >
                  ‡§™‡§ø‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ - {data.fatherName}
                </td>
              </tr>
              <tr>
                <td
                  colSpan="3"
                  style={{
                    color: "rgb(0, 0, 0)",
                    fontWeight: 600,
                    borderBottom: "1px dotted rgb(58, 58, 58)",
                  }}
                >
                  ‡§Æ‡•ã‡§¨‡§æ‡§à‡§≤ ‡§®‡§Ç. - +91:{data.phoneNumber}
                </td>
              </tr>
              <tr>
                <td
                  colSpan="3"
                  style={{
                    color: "rgb(0, 0, 0)",
                    fontWeight: 600,
                  }}
                >
                  ‡§™‡§¶‡§Ø‡§æ‡§§‡•ç‡§∞‡•Ä ‡§ï‡§æ ‡§™‡§§‡§æ - {data.address}
                </td>
              </tr>
              <tr>
                <td
                  colSpan="3"
                  style={{
                    textAlign: "center",
                    color: "rgb(12, 0, 177)",
                    fontWeight: 700,
                    fontSize: "13px",
                    borderTop: "2px solid black",
                  }}
                >
                  ‡§∏‡§Æ‡•ç‡§™‡§∞‡•ç‡§ï ‡§∏‡•Ç‡§§‡•ç‡§∞ : 8696555530, 9887662860
                </td>
              </tr>
            </tbody>
          </table>
        ))}

      </div>
    </div>
  );
};

export default Form;
